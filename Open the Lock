class Solution {
    public int openLock(String[] deadends, String target) {
        
        Set<String> set = new HashSet<>(Arrays.asList(deadends));
        Queue<String> q = new LinkedList<>();
        q.add("0000");
        int result = -1;
        while(!q.isEmpty()) {
            result++;
            int size = q.size();
            //System.out.println("result: "+result +" size: "+ size);
            while(size > 0) {
                String s = q.poll();
                //System.out.println("sizeDown: "+ size);
                //System.out.println("s:"+s+" target:"+target);
                if(s.equals(target)) {
                    return result;
                 }
                 if(set.contains(s)) {
                     size--;
                    continue;
                }
                set.add(s);
                q.addAll(generateSequence(s));
                size--;
            }
         
        }
        return -1;
        
    }
    
    List<String> generateSequence(String s) {
        List<String> list = new ArrayList<>();
        
        for(int i=0; i<4; i++) {
            list.add(s.substring(0,i)+(s.charAt(i)=='0' ? '9' : Integer.toString((s.charAt(i)-'0')-1))+s.substring(i+1));
            list.add(s.substring(0,i)+(s.charAt(i)=='9' ? '0' : Integer.toString((s.charAt(i)-'0')+1))+s.substring(i+1));
        }
        return list;
    }
}
