class Solution {
    public int minPathSum(int[][] grid) {
        int[][] arr = new int[grid.length][grid[0].length];
        boolean[][] visited = new boolean[grid.length][grid[0].length];
        //arr[0][0] = grid[0][0];
       
        findPathSum(grid, visited, arr, 0, 0, arr[0][0]);
            
        return arr[grid.length-1][grid[0].length-1];
    }
    
    private void findPathSum(int[][] grid, boolean[][] visited, int[][] arr, int i, int j, int cost) {
        if(i<0 || i> grid.length-1 || j<0 || j>grid[0].length-1) {
            return;
        }
        if(visited[i][j]) {
            return;
        }
        else {
            visited[i][j] = true;
           
            if(arr[i][j] > cost+grid[i][j] || arr[i][j] == 0) {
                arr[i][j] = cost+grid[i][j];
                findPathSum(grid, visited, arr, i+1, j, arr[i][j]);
                findPathSum(grid, visited, arr, i, j+1, arr[i][j]);
            }
            visited[i][j] = false;
            //System.out.println(Arrays.deepToString(arr));
            return;
        }
    }
}
